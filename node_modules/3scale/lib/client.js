// Generated by CoffeeScript 1.12.2
var AuthorizeResponse, Client, Promise, Response, VERSION, https, parser, querystring, xml2js,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

https = require('https');

querystring = require('qs');

xml2js = require('xml2js');

Promise = require('es6-promise').Promise;

VERSION = require('../package.json').version;

Response = require('./response');

AuthorizeResponse = require('./authorize_response');

parser = new xml2js.Parser({
  explicitArray: false,
  mergeAttrs: true,
  explicitAttrs: true,
  charkey: 'text'
});


/*
  3Scale client API
  Parameter: 
    provider_key {String} Required if you don't use service_token in the method. 
    Options: 
      host {String} Optional
      port {number} Optional
  
  Example:
    Client = require('3scale').Client
    
    client = new Client(provider_key, options)    //If you use your provider_key
    or 
    client = new Client(options)                  //If you use a service_token in the method
 */

module.exports = Client = (function() {
  Client.prototype.DEFAULT_HEADERS = {
    "X-3scale-User-Agent": "plugin-node-v" + VERSION
  };

  function Client(provider_key, options) {
    var opts, ref, ref1;
    if (typeof provider_key === 'object' && options === void 0) {
      opts = provider_key;
    } else {
      this.provider_key = provider_key;
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.warn === "function") {
          console.warn('provider_key is deprecated in favor of service_token with service_id. The release of this client will default to use service_token');
        }
      }
      opts = options;
    }
    this.host = (ref = opts != null ? opts.host : void 0) != null ? ref : 'su1.3scale.net';
    this.port = (ref1 = opts != null ? opts.port : void 0) != null ? ref1 : 443;
  }


  /*
    Authorize an Application
    ------------------------
  
    Parameters:
      options is a Hash object with the following fields
        service_token Required if you didn't use provider_key to ceate the Client instance 
        app_id Required
        service_id Required (from November 2016)
        app_key Optional 
        referrer Optional
        usage Optional
      callback {Function} Is the callback function that receives the Response object which includes `is_success` method to determine the status of the response
  
    Example using provider_key:
      client.authorize {service_id: '1234567890987', app_id: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      client.authorize {service_token: '12sdtsdr23454sdfsdf', service_id: '1234567890987', app_id: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.authorize = function(options, callback) {
    var query, req_opts, result;
    result = null;
    this._verify_app_id_exists(options);
    query = this._build_query_string(options);
    req_opts = this._prepare_request("/transactions/authorize.xml", query);
    return this._do_request_response(req_opts, callback, "Client::authorize");
  };


  /*
    OAuthorize an Application
    -------------------------
  
    Parameters:
      options is a Hash object with the following fields
        service_token Required if you didn't use provider_key to ceate the Client instance 
        app_id Required
        service_id Required (from November 2016)
      callback {Function} Is the callback function that receives the Response object which includes `is_success` method to determine the status of the response
  
    Example using provider_key:
      client.oauth_authorize {service_id: '1234567890987', app_id: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      client.oauth_authorize {service_token: '12sdtsdr23454sdfsdf', service_id: '1234567890987', app_id: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.oauth_authorize = function(options, callback) {
    var query, req_opts;
    this._verify_app_id_exists(options);
    query = this._build_query_string(options);
    req_opts = this._prepare_request("/transactions/oauth_authorize.xml", query);
    return this._do_request_response(req_opts, callback, "Client::oauth_authorize");
  };


  /*
    Authorize with user_key
    -----------------------
  
    Parameters:
      options is a Hash object with the following fields
        service_token Required if you didn't use provider_key to ceate the Client instance
        user_key Required
        service_id Required (from November 2016)
      callback {Function} Is the callback function that receives the Response object which includes `is_success` method to determine the status of the response
  
    Example using provider_key:
      client.authorize_with_user_key {service_id: '1234567890987', user_key: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      client.authorize_with_user_key {service_token: '12sdtsdr23454sdfsdf', service_id: '1234567890987', user_key: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.authorize_with_user_key = function(options, callback) {
    var query, req_opts;
    this._verify_user_key_exists(options);
    query = this._build_query_string(options);
    req_opts = this._prepare_request("/transactions/authorize.xml", query);
    return this._do_request_response(req_opts, callback, "Client::authorize_with_user_key");
  };


  /*
    Authorize and Report in a single call with app_id and app_key
    -------------------------------------------------------------
    
    Parameters:
      options is a Hash object with the following fields
        service_token Required if you didn't use provider_key to ceate the Client instance
        app_id Required
        service_id Required (from November 2016)
        app_key, user_id, object, usage, no-body
      callback {Function} Is the callback function that receives the Response object which includes `is_success` method to determine the status of the response
  
    Example using provider_key:
      client.authrep {service_id: '1234567890987', app_id: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      client.authrep {service_token: '12sdtsdr23454sdfsdf', service_id: '1234567890987', app_id: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.authrep = function(options, callback) {
    var query, req_opts;
    this._verify_app_id_exists(options);
    this._ensure_hits_exist_in(options);
    query = this._build_query_string(options);
    req_opts = this._prepare_request("/transactions/authrep.xml", query);
    return this._do_request_response(req_opts, callback, "Client::authrep");
  };


  /*
    Authorize and Report in a single call with user_key
    ---------------------------------------------------
    
    Parameters:
      options is a Hash object with the following fields
        service_token Required if you didn't use provider_key to ceate the Client instance
        user_key Required
        service_id Required (from November 2016)
      callback {Function} Is the callback function that receives the Response object which includes `is_success` method to determine the status of the response
  
    Example using provider_key:
      client.authrep_with_user_key {service_id: '1234567890987', user_key: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      client.authrep_with_user_key {service_token: '12sdtsdr23454sdfsdf', service_id: '1234567890987', user_key: 'ca5c5a49'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.authrep_with_user_key = function(options, callback) {
    var query, req_opts;
    this._verify_user_key_exists(options);
    this._ensure_hits_exist_in(options);
    query = this._build_query_string(options);
    req_opts = this._prepare_request("/transactions/authrep.xml", query);
    return this._do_request_response(req_opts, callback, "Client::authrep_with_user_key");
  };


  /*
    Authorize and Report in a single call with OAuth
    ------------------------------------------------
    
    Parameters:
      options is a Hash object with the following fields:
        service_token Required if you didn't use provider_key to ceate the Client instance
        app_id Required. app_id is your Client ID. 
        service_id Required (from November 2016)
      callback {Function} Is the callback function that receives the Response object which includes `is_success` method to determine the status of the response
  
    Example using provider_key:
      client.oauth_authrep {service_id: '1234567890987', app_id: '87654321'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      client.authrep_oauth {service_token: '12sdtsdr23454sdfsdf', service_id: '1234567890987', app_id: '87654321'}, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.oauth_authrep = function(options, callback) {
    var query, req_opts;
    this._verify_app_id_exists(options);
    this._ensure_hits_exist_in(options);
    query = this._build_query_string(options);
    req_opts = this._prepare_request("/transactions/oauth_authrep.xml", query);
    return this._do_request_response(req_opts, callback, "Client::oauth_authrep");
  };


  /*
    Report transaction(s)
    ---------------------
    Parameters:
      service_id {String} Required (from November 2016)
      trans {Array} Each array element contain information of a transaction. That information is in a Hash in the form
        A) if you used provider_key to ceate the Client instance 
        {
          app_id {String} Required
          usage {Hash} Required
          timestamp {String} any string parseable by the Data object
        }
        B) if you didn't use provider_key to ceate the Client instance
        {
          service_token {String} Required
          app_id {String} Required
          usage {Hash} Required
          timestamp {String} any string parseable by the Data object
        }
  
      callback {Function} Function that recive the Response object which include a `is_success` method. Required
  
    
    Example using provider_key:
      trans = [
        { "app_id": "abc123", "usage": {"hits": 1}},
        { "app_id": "abc123", "usage": {"hits": 1000}}
      ]
  
      client.report "your service id", trans, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
  
    Example using service_token:
      trans = [
        { "service_token": "12sdtsdr23454sdfsdf", "app_id": "abc123", "usage": {"hits": 1}},
        { "service_token": "12sdtsdr23454sdfsdf", "app_id": "abc123", "usage": {"hits": 1000}}
      ]
  
      client.report "your service id", trans, (response) ->
        if response.is_success
           * All Ok
        else
         sys.puts "#{response.error_message} with code: #{response.error_code}"
   */

  Client.prototype.report = function(service_id, trans, callback) {
    var _self, key, params, query, ref, req_opts, request, url, value;
    _self = this;
    if ((typeof service_id === 'object') && (typeof trans === 'function')) {
      callback = trans;
      trans = service_id;
      service_id = void 0;
    }
    if (trans == null) {
      throw new Error("no transactions to report");
    }
    url = "/transactions.xml";
    if (trans.service_token) {
      params = {
        transactions: trans
      };
    } else {
      params = {
        transactions: trans,
        provider_key: this.provider_key
      };
    }
    if (service_id) {
      params.service_id = service_id;
    }
    query = querystring.stringify(params).replace(/\[/g, "%5B").replace(/\]/g, "%5D");
    req_opts = {
      host: this.host,
      port: this.port,
      path: url,
      method: 'POST',
      headers: {
        "host": this.host,
        "Content-Type": "application/x-www-form-urlencoded",
        "Content-Length": query.length
      }
    };
    ref = this.DEFAULT_HEADERS;
    for (key in ref) {
      value = ref[key];
      req_opts.headers[key] = value;
    }
    request = https.request(req_opts, function(response) {
      var xml;
      xml = "";
      response.on("data", function(data) {
        return xml += data;
      });
      return response.on('end', function() {
        var _response;
        if (response.statusCode === 202) {
          _response = new Response();
          _response.success(response.statusCode);
          return callback(_response);
        } else if (response.statusCode === 403) {
          return _self._build_error_response(response.statusCode, xml, callback);
        }
      });
    });
    request.write(query);
    return request.end();
  };

  Client.prototype._ensure_hits_exist_in = function(options) {
    return options.usage || (options.usage = {
      hits: 1
    });
  };

  Client.prototype._build_query_string = function(options) {
    var query, replacer;
    if (options.service_token) {
      query = querystring.stringify(options);
    } else {
      replacer = function(key, value) {
        if (key === 'service_token') {
          return void 0;
        } else {
          return value;
        }
      };
      query = querystring.stringify(options, replacer);
      query += '&' + querystring.stringify({
        provider_key: this.provider_key
      });
    }
    return query;
  };

  Client.prototype._do_request_response = function(req_opts, callback, error_message) {
    var _self, request;
    _self = this;
    request = https.request(req_opts, function(response) {
      var xml;
      response.setEncoding('utf8');
      xml = "";
      response.on('data', function(chunk) {
        return xml += chunk;
      });
      return response.on('end', function() {
        var ref;
        if (response.statusCode === 200 || response.statusCode === 409) {
          return _self._build_success_authorize_response(response.statusCode, xml, callback);
        } else if (ref = response.statusCode, indexOf.call([400, 401, 402, 403, 404, 405, 406, 407, 408], ref) >= 0) {
          return _self._build_error_response(response.statusCode, xml, callback);
        } else {
          throw error_message + " Server Error Code: " + response.statusCode;
        }
      });
    });
    return request.end();
  };

  Client.prototype._prepareRequestObject = function(headers, method, host, port, path, query) {
    var req_opts;
    req_opts = {
      host: host,
      port: port,
      path: path + "?" + query,
      method: method,
      headers: headers
    };
    return req_opts;
  };


  /*
    Convenience method to build the req_opts we'll use throughout the Client class.
   */

  Client.prototype._prepare_request = function(path, query) {
    return this._prepareRequestObject(this.DEFAULT_HEADERS, 'GET', this.host, this.port, path, query);
  };


  /*
   Grants options.app_id exists. 
   If param `options` is not an object or doesn't contain 'app_id' throws error
   */

  Client.prototype._verify_app_id_exists = function(options) {
    if ((typeof options !== 'object') || (options.app_id === void 0)) {
      throw "missing app_id";
    }
  };


  /*
   Grants options.user_key exists. 
   If param `options` is not an object or doesn't contain 'user_key' throws error
   */

  Client.prototype._verify_user_key_exists = function(options) {
    if ((typeof options !== 'object') || (options.user_key === void 0)) {
      throw "missing user_key";
    }
  };

  Client.prototype._parseXML = function(xml) {
    return new Promise(function(resolve, reject) {
      return parser.parseString(xml, function(err, res) {
        if (err) {
          return reject(err);
        } else {
          return resolve(res);
        }
      });
    });
  };

  Client.prototype._build_success_authorize_response = function(status_code, xml, callback) {
    return this._parseXML(xml)["catch"](function(err) {
      throw err;
    }).then(function(doc) {
      var authorize, fn, index, plan, reason, response, usage_report, usage_reports;
      response = new AuthorizeResponse();
      authorize = doc.status.authorized;
      plan = doc.status.plan;
      usage_reports = doc.status.usage_reports;
      if (authorize === 'true') {
        response.success(status_code);
      } else {
        reason = doc.status.reason;
        response.error(status_code, reason);
      }
      response.set_plan(plan);
      if (usage_reports) {
        usage_reports = usage_reports.usage_report.length != null ? usage_reports.usage_report : [usage_reports.usage_report];
        fn = function(usage_report) {
          var report;
          report = {
            period: usage_report.period,
            metric: usage_report.metric,
            current_value: usage_report.current_value,
            max_value: usage_report.max_value
          };
          if (report.period !== 'eternity') {
            report.period_start = usage_report.period_start;
            report.period_end = usage_report.period_end;
          }
          return response.add_usage_reports(report);
        };
        for (index in usage_reports) {
          usage_report = usage_reports[index];
          fn(usage_report);
        }
      }
      return callback(response);
    });
  };

  Client.prototype._build_error_response = function(status_code, xml, callback) {
    return this._parseXML(xml)["catch"](function(err) {
      throw err;
    }).then(function(doc) {
      var error, response;
      error = doc.error;
      response = new Response();
      response.error(status_code, error.text, error.code);
      return callback(response);
    });
  };

  return Client;

})();
